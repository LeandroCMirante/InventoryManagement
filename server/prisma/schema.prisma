// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
  theme    = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String    // Lembre-se de armazenar um hash, n√£o a senha em texto plano
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  products          Product[]
  sales             Sale[]
  purchases         Purchase[]
  expenseCategories ExpenseCategory[]
  expenses          Expense[]
}

model Product {
  id              String         @id @default(cuid())
  name            String
  description     String?
  sku             String?
  quantity        Int            @default(0)
  purchasePrice   Decimal
  salePrice       Decimal
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?      // Para Soft Deletes

  // Relations
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  saleItems       SaleItem[]
  purchaseItems   PurchaseItem[]

  @@unique([userId, sku])
}

model Sale {
  id          String     @id @default(cuid())
  saleDate    DateTime   @default(now())
  totalAmount Decimal
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?  // Para Soft Deletes

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  items       SaleItem[]
}

model SaleItem {
  id          String   @id @default(cuid())
  quantity    Int
  priceAtSale Decimal

  // Relations
  sale        Sale     @relation(fields: [saleId], references: [id])
  saleId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
}

model Purchase {
  id           String         @id @default(cuid())
  purchaseDate DateTime       @default(now())
  totalCost    Decimal
  supplier     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?      // Para Soft Deletes

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  items        PurchaseItem[]
}

model PurchaseItem {
  id             String   @id @default(cuid())
  quantity       Int
  costAtPurchase Decimal

  // Relations
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId   String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
}

model ExpenseCategory {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Para Soft Deletes

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expenses  Expense[]

  @@unique([userId, name])
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Decimal
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?       // Para Soft Deletes

  // Relations
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
}


// --- ENUMS ---

enum Role {
  ADMIN
  USER
}