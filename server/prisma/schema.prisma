// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  products   Product[]
  sales      Sale[]
  purchases  Purchase[]
  expenseCategories ExpenseCategory[]
  expenses          Expense[]
}

model Product {
  id            String    @id @default(cuid())
  name          String    // Ex: "Suco de Fruta"
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  variants      ProductVariant[] // Um produto tem muitas variações
}

// A Variação é o item real que tem estoque e é vendido.
model ProductVariant {
  id            String    @id @default(cuid())
  name          String    // Ex: "Sabor Laranja", "Tamanho 500ml"
  salePrice     Decimal   // O preço de venda da variação
  quantity      Int       @default(0) // Estoque desta variação específica
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  product       Product        @relation(fields: [productId], references: [id])
  productId     String
  saleItems     SaleItem[]
  purchaseItems PurchaseItem[]
}


// A Venda representa a SAÍDA de produtos do estoque.
model Sale {
  id          String     @id @default(cuid())
  clientName String?
  saleDate    DateTime   @default(now())
  totalAmount Decimal
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  items       SaleItem[]
}

model SaleItem {
  id          String   @id @default(cuid())
  quantity    Int
  priceAtSale Decimal // Preço de venda no momento da transação

  // Relations
  sale        Sale     @relation(fields: [saleId], references: [id])
  saleId      String
  variant     ProductVariant  @relation(fields: [variantId], references: [id]) // Aponta para a Variação
  variantId   String
}

// A Compra representa a ENTRADA de produtos no estoque.
model Purchase {
  id           String         @id @default(cuid())
  purchaseDate DateTime       @default(now())
  supplier     String?
  shippingCost Decimal        @default(0) // Custo do frete para esta remessa
  totalCost    Decimal        // Custo total (soma dos itens + frete)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  items        PurchaseItem[]
}

model PurchaseItem {
  id             String   @id @default(cuid())
  quantity       Int
  costAtPurchase Decimal  // O preço de CUSTO da variação nesta compra

  // Relations
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId   String
  variant      ProductVariant  @relation(fields: [variantId], references: [id]) // Aponta para a Variação
  variantId    String
}

model ExpenseCategory {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expenses  Expense[]

  @@unique([userId, name])
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Decimal
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?

  // Relations
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
}

// --- ENUMS ---

enum Role {
  ADMIN
  USER
}